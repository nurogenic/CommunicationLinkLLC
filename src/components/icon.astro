---
import type { HTMLAttributes } from "astro/types";
import { cache } from "./cache.js";

interface Props extends HTMLAttributes<"svg"> {
  name: SVGAttributes;
  "is:inline"?: boolean;
  title?: string;
  size?: number | string;
  width?: number | string;
  height?: number | string;
}

class AstroIconError extends Error {
  public hint: string = '';

  constructor(message: string) {
    super(message);
  }
}

const req = Astro.request;
const { name = "", title, "is:inline": inline = false, ...props } = Astro.props;
const map = cache.get(req) ?? new Map();
const i = map.get(name) ?? 0;
map.set(name, i + 1);
cache.set(req, map);

const { include = {} } = { include: {} };
// const sets = Object.keys(include);

const includeSymbol = !inline && i === 0;

let [setName, iconName] = (name as string).split(":");

if (!setName && iconName) {
  const err = new AstroIconError(`Invalid "name" provided!`);
  if (import.meta.env.DEV) {
    err.hint = `The provided value of "${name}" is invalid.\n\nDid you forget the icon set name? If you were attemping to reference a local icon, use the icon's name directly. (ie. "${iconName}")`;
  }
  throw err;
}

// No iconName, assume local icon reference
if (!iconName) {
  // Assign the provided setName to the iconName
  iconName = setName;
  setName = "local";
}

const id = `${iconName ?? setName}`;

if (props.size) {
  props.width = props.size;
  props.height = props.size;
  delete props.size;
}
// const renderData = iconToSVG(iconData);
const normalizedProps = props;
const { default: normalizedBody} = await import(`/src/icons/${iconName}.svg?raw`);
---

<svg {...normalizedProps} data-icon={name}>
  {title && <title>{title}</title>}
  {
    inline ? (
      <Fragment id={id} set:html={normalizedBody} />
    ) : (
      <Fragment>
        {includeSymbol && <symbol id={id} set:html={normalizedBody} />}
        <use xlink:href={`#${id}`} />
      </Fragment>
    )
  }
</svg>